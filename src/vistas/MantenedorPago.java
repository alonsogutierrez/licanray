/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import Controlador.CajaDao;
import Controlador.CajaDaoImpl;
import Controlador.ConfiguracionDao;
import Controlador.ConfiguracionDaoImpl;
import Controlador.ProductoDao;
import Controlador.ProductoDaoImpl;
import Controlador.UsuarioDao;
import Controlador.UsuarioDaoImpl;
import Modelo.Producto;
import Modelo.VentaDetalle;
import Modelo.Ventas;
import java.sql.Time;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static licanray.LicanRay.caja;
import static licanray.LicanRay.usuario;

/**
 *
 * @author cristian
 */
public class MantenedorPago extends javax.swing.JFrame {

    ProductoDao productoDao = new ProductoDaoImpl();
    Producto producto = new Producto();
    Ventas ventas = new Ventas();
    VentaDetalle ventaDetalle = new VentaDetalle();
    int cantidad = 0; //Cantidad total de los productos vendidos.
    int cant_p = 0; //Cantidad total de cada producto.
    int subtotal = 0; //Subtotal del producto en venta detalle.
    Double peso_tot;  //Peso total de todos los productos.
    Double peso_prod; //Peso de cada producto.
    int costos_tot; //Costos totales de todos los productos.
    int costo_prod; //Costo total de cada producto.
    ArrayList<String> codigoProducto = new ArrayList();// Nueva lista del codigo de producto
    ArrayList<Integer> listaCan = new ArrayList();// Se guarda la lista que contiene la cantidad de cada producto.
    int numeroItems;//numero de filas que se van agregar ;
    int id_prod; // id producto que se ingresa.
    ArrayList<Integer> listaSubtotal = new ArrayList(); //Lista que guarda el subtotal de cada producto. 
    ArrayList<Integer> precioProd = new ArrayList(); //Lista que guarda el precio de cada producto.
    ArrayList<Double> pesoProd = new ArrayList(); //Lista que guarda el peso de cada producto.
    ArrayList<Integer> costosProd = new ArrayList(); //Lista que guarda el coste de cada producto.
    DefaultTableModel modelo;
    int total;
    MantenedorMenuPrincipal mantenedorMenuPrincipal;
    CajaDao cajaDao = new CajaDaoImpl();
    Calendar cal = GregorianCalendar.getInstance();

    /**
     * Creates new form MantenedorPago
     */
    public MantenedorPago() {

        initComponents();
    }

    public MantenedorPago(int tot, int cant, ArrayList<String> codigoProducto, int cant_prod, int numeroItems, ArrayList<Integer> listaCan, ArrayList<Integer> listaSubtotal, DefaultTableModel modelo, ArrayList<Integer> precioProd, ArrayList<Double> pesoProducto, ArrayList<Integer> costosProducto, int costoTotal) {
        initComponents();
        DecimalFormat formateador = new DecimalFormat("###,###");
        String texto = String.valueOf(tot);
        String ff = formateador.format(Double.parseDouble(texto));

        lblTotalAPagar.setText(String.valueOf(ff));
        this.total = tot;
        cantidad = cant;
        cant_p = cant_prod;
        this.codigoProducto = codigoProducto;
        this.numeroItems = numeroItems;
        this.listaCan = listaCan;
        this.listaSubtotal = listaSubtotal;
        this.modelo = modelo;
        this.precioProd = precioProd;
        this.pesoProd = pesoProducto;
        this.costosProd = costosProducto;
        this.costos_tot = costoTotal;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        lblTotalAPagar = new javax.swing.JLabel();
        lblVuelto = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Total a pagar :");

        jLabel2.setText("Efectivo :");

        txtEfectivo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtEfectivoInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        txtEfectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEfectivoActionPerformed(evt);
            }
        });
        txtEfectivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEfectivoKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEfectivoKeyReleased(evt);
            }
        });

        jLabel3.setText("Vuelto :");

        btnOK.setText("OK");
        btnOK.setEnabled(false);
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        btnOK.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnOKKeyPressed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        lblTotalAPagar.setText("jLabel5");

        jLabel4.setText("$");

        jLabel5.setText("$");

        jLabel6.setText("$");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEfectivo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblVuelto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(17, 17, 17)
                                .addComponent(lblTotalAPagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(109, 109, 109))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotalAPagar)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVuelto, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel5)))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnVolver))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtEfectivoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEfectivoKeyTyped
        // TODO add your handling code here:
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {

            evt.consume();
            JOptionPane.showMessageDialog(null, "No puede ingresar Letras!!!", "Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        btnOK.setEnabled(true);

    }//GEN-LAST:event_txtEfectivoKeyTyped

    private void txtEfectivoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEfectivoKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtEfectivo.getText().trim();
        textoNuevo = texto.replace(".", "");

        String ff = formateador.format(Double.parseDouble(textoNuevo));

        txtEfectivo.setText(ff);

    }//GEN-LAST:event_txtEfectivoKeyReleased

    private void txtEfectivoInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtEfectivoInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_txtEfectivoInputMethodTextChanged

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:

        String verdad, aux = txtEfectivo.getText().trim();
        verdad = aux.replace(".", "");
        int efectivo = Integer.parseInt(verdad);
        String real, noreal = lblTotalAPagar.getText();
        real = noreal.replace(".", "");
        int tot = Integer.parseInt(real);
        int resultado = efectivo - tot;
        if (resultado >= 0) {
            try {
                DecimalFormat formateador = new DecimalFormat("###,###");
                String texto = String.valueOf(resultado);
                String ff = formateador.format(Double.parseDouble(texto));

                lblVuelto.setText(String.valueOf(ff));
                Calendar cal = GregorianCalendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                String fechaReal = cal.get(Calendar.YEAR) + "-" + mes + "-" + cal.get(Calendar.DAY_OF_MONTH);
                String hora = String.valueOf(cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + ":" + cal.get(Calendar.SECOND));
                UsuarioDao usuarioDao = new UsuarioDaoImpl();
                int idUsuario = usuarioDao.idUsuario(usuario.getNombre());
                System.err.println("id user: " + idUsuario);
                int idCaja = cajaDao.idCaja(idUsuario);
                System.err.println("id caja: " + idCaja);
                System.err.println("cant prod: " + cantidad);
                ventas = new Ventas(0, idCaja, tot, cantidad, fechaReal, hora, peso_tot, costos_tot);
                productoDao.ventaProducto(ventas, idCaja);
                int idVenta = productoDao.idUltimaVenta();
                System.err.println("id venta: " + idVenta);

                //Recorre la cantidad de filas agregadas a la tabla modelo.
                for (int i = 0; i < numeroItems; i++) {
                    id_prod = productoDao.idProducto(codigoProducto.get(i));//obtenemos el id del producto en la posicion i esima.
                    cant_p = listaCan.get(i); // obtenemos la cantidad de cada producto en la posicion i esima.
                    subtotal = listaSubtotal.get(i); //obtenemos el sub total de cada producto.
                    peso_prod = pesoProd.get(i);  //Obtenemos el peso de cada producto, y solo tendran valor los productos del tipo 1, osea de peso.
                    licanray.LicanRay.mantenedorMenuPrincipal.costosTotales = costosProd.get(i); //Obtenemos el costo de cada producto.
                    ventaDetalle = new VentaDetalle(idVenta, id_prod, cant_p, subtotal, peso_prod);
                    productoDao.detalleVenta(ventaDetalle);
                }
                //Arreglar...!!!!!!!
                int usuarioActual = usuario.getIdUsuario();
                String horaIngreso = caja.getHora();
                Date fechaHoy = caja.getFecha();
                int dineroActual = cajaDao.dineroActualCaja(usuarioActual);

                int dineroNuevo = dineroActual + tot;
                cajaDao.actualizarCaja(dineroNuevo, cajaDao.idCaja(usuarioActual));

                //Actualizamos la cantidad que queda de cada producto por unidad y por peso.
                for (int i = 0; i < numeroItems; i++) {

                    //Vemos la cantidad de cada producto por unidad y actualizamos.
                    int cantidad = productoDao.verificarCantidad(codigoProducto.get(i)); // obtiene la cantidad del producto que esta en la base de datos.
                    int cantidadComprada = listaCan.get(i); //obtiene la cantidad de cada producto comprado.
                    int result = cantidad - cantidadComprada;
                    //Actualizar el peso del producto vendido.

                    //Vemos el peso de cada producto por peso y actualizamos.
                    Double peso_producto = productoDao.verificarPeso(codigoProducto.get(i));
                    Double pesoComprado = pesoProd.get(i);
                    Double result_peso = peso_producto - pesoComprado;

                    //Actualizar la cantidad y el peso.
                    productoDao.actualizaCantidad(result, codigoProducto.get(i));
                    productoDao.actualizaPeso(result_peso, codigoProducto.get(i));

                }

                //Obtenemos los productos minimos en bodega para dar aviso en caso de que hallan menos de los configurados.
                ConfiguracionDao config = (ConfiguracionDao) new ConfiguracionDaoImpl();
                int num_prod = config.CantProdMin();

                //¡¡Ver si agregamos el peso minimo también!!
                //Verificamos productos en stock vs los que nos pide la configuracion.
                for (int i = 0; i < codigoProducto.size(); i++) {

                    //Si es producto de cantidad, entonces el tipo de producto retorna 1, de lo contrario retorna 0.
                    if (productoDao.tipoProducto(id_prod) == 1) {
                        int resp = productoDao.verificarCantidad(codigoProducto.get(i));
                        if (resp <= num_prod) {
                            JOptionPane.showMessageDialog(this, "Le quedan " + resp + " " + productoDao.devuelveNombre(codigoProducto.get(i)) + " en la bodega.", "ALERTA", JOptionPane.WARNING_MESSAGE);
                        }
                    }

                }

                //Removemos todos los nodos de cada lista, para liberar la memoria.
                for (int i = 0; i < numeroItems; i++) {
                    modelo.removeRow(0);
                    listaSubtotal.remove(0);
                    listaCan.remove(0);
                    codigoProducto.remove(0);
                    precioProd.remove(0);
                    pesoProd.remove(0);
                    costosProd.remove(0);
                    licanray.LicanRay.mantenedorMenuPrincipal.lblTotal.setText("0");
                    licanray.LicanRay.mantenedorMenuPrincipal.setTotal(0);
                }

                licanray.LicanRay.mantenedorMenuPrincipal.btnEliminarProducto.setEnabled(false);
                licanray.LicanRay.mantenedorMenuPrincipal.btnCobrar.setEnabled(false);
                licanray.LicanRay.mantenedorMenuPrincipal.btnCambiarCantidad.setEnabled(false);

                btnOK.setEnabled(false);
                txtEfectivo.setEnabled(false);
            } catch (Exception ex) {
                Logger.getLogger(MantenedorPago.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "No le alcanza el efectivo, porfavor ingresar bien", "Dinero insuficiente", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnOKKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnOKKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOKKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void txtEfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEfectivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEfectivoActionPerformed

    public void cerrar() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(rootPane, "Desea cerrar por completo la aplicación", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnOK;
    public javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTotalAPagar;
    private javax.swing.JLabel lblVuelto;
    public javax.swing.JTextField txtEfectivo;
    // End of variables declaration//GEN-END:variables
}
