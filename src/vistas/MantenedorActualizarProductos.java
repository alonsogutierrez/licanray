/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import Controlador.ProductoDao;
import Controlador.ProductoDaoImpl;
import Modelo.Producto;
import java.awt.event.ItemEvent;
import java.sql.Array;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author cristian
 */
public class MantenedorActualizarProductos extends javax.swing.JFrame {

    /**
     * Creates new form MantenedorActualizarProductos
     */
    java.awt.event.ItemEvent evt;
    Producto producto = new Producto();

    public MantenedorActualizarProductos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxMarca = new javax.swing.JCheckBox();
        cbxNombre = new javax.swing.JCheckBox();
        cbxCantidad = new javax.swing.JCheckBox();
        cbxPeso = new javax.swing.JCheckBox();
        cbxPrecioComprado = new javax.swing.JCheckBox();
        cbxPrecioVenta = new javax.swing.JCheckBox();
        txtMarca = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        txtPeso = new javax.swing.JTextField();
        txtPrecioComprado = new javax.swing.JTextField();
        txtPrecioVenta = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Actualizar Productos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cbxMarca.setText("Marca");
        cbxMarca.setEnabled(false);
        cbxMarca.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMarcaItemStateChanged(evt);
            }
        });
        cbxMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMarcaActionPerformed(evt);
            }
        });

        cbxNombre.setText("Nombre");
        cbxNombre.setEnabled(false);
        cbxNombre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxNombreItemStateChanged(evt);
            }
        });
        cbxNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxNombreActionPerformed(evt);
            }
        });

        cbxCantidad.setText("Cantidad de unidades");
        cbxCantidad.setEnabled(false);
        cbxCantidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxCantidadItemStateChanged(evt);
            }
        });

        cbxPeso.setText("Peso total (Kg)");
        cbxPeso.setEnabled(false);
        cbxPeso.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxPesoItemStateChanged(evt);
            }
        });
        cbxPeso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPesoActionPerformed(evt);
            }
        });

        cbxPrecioComprado.setText("Precio comprado por unidad/Kg");
        cbxPrecioComprado.setEnabled(false);
        cbxPrecioComprado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxPrecioCompradoItemStateChanged(evt);
            }
        });

        cbxPrecioVenta.setText("Precio venta por unidad/Kg");
        cbxPrecioVenta.setEnabled(false);
        cbxPrecioVenta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxPrecioVentaItemStateChanged(evt);
            }
        });
        cbxPrecioVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPrecioVentaActionPerformed(evt);
            }
        });

        txtMarca.setEnabled(false);
        txtMarca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMarcaKeyTyped(evt);
            }
        });

        txtNombre.setEnabled(false);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtCantidad.setEnabled(false);
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantidadKeyReleased(evt);
            }
        });

        txtPeso.setEnabled(false);
        txtPeso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesoKeyTyped(evt);
            }
        });

        txtPrecioComprado.setEnabled(false);
        txtPrecioComprado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioCompradoKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecioCompradoKeyReleased(evt);
            }
        });

        txtPrecioVenta.setEnabled(false);
        txtPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioVentaKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecioVentaKeyReleased(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtBuscar.setText("Ingrese Codigo");
        txtBuscar.setToolTipText("Ingrese Codigo");
        txtBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBuscarMouseClicked(evt);
            }
        });
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("$");

        jLabel2.setText("$");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMarca)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(txtNombre))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxNombre)
                            .addComponent(cbxMarca)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPrecioComprado, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(cbxPrecioComprado))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxPeso)
                                            .addComponent(cbxCantidad)
                                            .addComponent(cbxPrecioVenta)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(173, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxMarca)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxCantidad)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxPeso)
                    .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxPrecioComprado)
                    .addComponent(txtPrecioComprado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxPrecioVenta)
                    .addComponent(jLabel1))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizar)
                    .addComponent(jButton2))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        //Boton para buscar en la base de datos un producto por su codigo.
        ProductoDao productoDao = new ProductoDaoImpl();
        try {
            if (txtBuscar.getText().trim().length() <= 20) {
                if (!txtBuscar.getText().equals("Ingrese Codigo") && !txtBuscar.getText().trim().equals("")) {
                    if (productoDao.verificarProducto(txtBuscar.getText().trim())) {
                        
                        DecimalFormat formateador = new DecimalFormat("###,###");
                        producto = productoDao.buscarNombre(txtBuscar.getText().trim());

                        txtMarca.setText(producto.getMarca());
                        txtNombre.setText(producto.getNombre());
                        
                        String textoNuevo, texto = String.valueOf(producto.getCantidad());
                        textoNuevo = texto.replace(".", "");
                        String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));
                        txtCantidad.setText(ff);
                        
                        //Chequear el peso, para que quede todo bien.
                        txtPeso.setText(String.valueOf(producto.getPeso()));
                        
                        String textoNuevo2, texto2 = String.valueOf(producto.getPrecioCompra());
                        textoNuevo2 = texto2.replace(".", "");
                        ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo2)));
                        txtPrecioComprado.setText(ff);
                        
                        String textoNuevo3, texto3 = String.valueOf(producto.getPrecioVenta());
                        textoNuevo3 = texto3.replace(".", "");
                        ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo3)));
                        txtPrecioVenta.setText(ff);
                        
                        System.out.println("cant o peso: " +producto.getCant_o_Peso());

                        //Si el producto es de cantidad unitaria, el valor sera 1, sino sera 0.
                        if (producto.getCant_o_Peso() == 1) {
                            cbxPeso.setEnabled(false);
                            cbxCantidad.setEnabled(true);
                        }
                        else{
                            cbxCantidad.setEnabled(false);
                            cbxPeso.setEnabled(true);
                        }
                        
                        cbxMarca.setEnabled(true);
                        cbxNombre.setEnabled(true);
                        cbxPrecioComprado.setEnabled(true);
                        cbxPrecioVenta.setEnabled(true);
                        btnActualizar.setEnabled(true);
                        
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "El codigo no existe en la base de datos");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese el codigo del producto", "Error Datos", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "En el codigo debe ingresar 20 numeros como maximo", "Error Codigo", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            System.err.println("Error al buscar producto " + e);
        }


    }//GEN-LAST:event_btnBuscarActionPerformed

    private void cbxMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMarcaActionPerformed

    }//GEN-LAST:event_cbxMarcaActionPerformed

    private void cbxMarcaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMarcaItemStateChanged
        // Metodo que habilita y dehabilita el textbox de marca al seleccionar el checkbox.
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtMarca.setEnabled(true);
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            txtMarca.setEnabled(false);
        }

    }//GEN-LAST:event_cbxMarcaItemStateChanged

    private void cbxNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxNombreActionPerformed

    private void cbxNombreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxNombreItemStateChanged
        // Metodo que habilita y dehabilita el textbox de nombre al seleccionar el checkbox.
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtNombre.setEnabled(true);
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            txtNombre.setEnabled(false);

        }
    }//GEN-LAST:event_cbxNombreItemStateChanged

    private void cbxCantidadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxCantidadItemStateChanged
        // Metodo que habilita y dehabilita el textbox de cantidad al seleccionar el checkbox, si selecciona chexbox cantidad, deshabilita chexbox peso.
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtCantidad.setEnabled(true);

        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            txtCantidad.setEnabled(false);

        }
    }//GEN-LAST:event_cbxCantidadItemStateChanged

    private void cbxPesoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxPesoItemStateChanged
        // Metodo que habilita y deshabilita el textbox de peso al seleccionar el checkbox, si selecciona chexbox peso, deshabilita chexbox cantidad.
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtPeso.setEnabled(true);

        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            txtPeso.setEnabled(false);

        }
    }//GEN-LAST:event_cbxPesoItemStateChanged

    private void cbxPrecioCompradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxPrecioCompradoItemStateChanged
        // Metodo que habilita y dehabilita el textbox del precio comprado al seleccionar el checkbox.
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtPrecioComprado.setEnabled(true);
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            txtPrecioComprado.setEnabled(false);
        }
    }//GEN-LAST:event_cbxPrecioCompradoItemStateChanged

    private void cbxPrecioVentaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxPrecioVentaItemStateChanged
        // Metodo que habilita y dehabilita el textbox del precio venta al seleccionar el checkbox.
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtPrecioVenta.setEnabled(true);
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            txtPrecioVenta.setEnabled(false);
        }
    }//GEN-LAST:event_cbxPrecioVentaItemStateChanged

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // Boton para actualizar el producto, el cual analiza si los textbox estan vacios indicando los errores posibles.
        try {
            if (!txtBuscar.getText().equals("Ingrese Codigo") && !txtBuscar.getText().trim().equals("")) {
                if (txtMarca.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar la marca", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtNombre.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar el nombre", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtCantidad.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar la cantidad", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtPeso.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar el peso", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtPrecioComprado.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar el precio comprado", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtPrecioVenta.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar el precio de venta", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtMarca.getText().trim().length() > 21) {
                    JOptionPane.showMessageDialog(null, "La marca debe tener como maximo 20 caracteres", "Error marca", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtNombre.getText().trim().length() > 41) {
                    JOptionPane.showMessageDialog(null, "El nombre debe tener como maximo 40 caracteres", "Error nombre", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtMarca.getText().trim().length() > 21) {
                    JOptionPane.showMessageDialog(null, "La marca debe tener como maximo 20 caracteres", "Error marca", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int cant = 0;
                //Verificar si el producto es de cantidad o peso.

                if (cbxCantidad.isSelected()) {
                    int cant_vieja = producto.getCantidad();
                    String verdad, aux = txtCantidad.getText().trim();
                    verdad = aux.replace(".", "");
                    cant = Integer.parseInt(verdad);
                    System.out.println("cantidad: " + cant);

                    if (cant <= 0) {
                        JOptionPane.showMessageDialog(null, "Ingrese la cantidad correctamente.", "Error cantidad", JOptionPane.ERROR_MESSAGE);

                    }
                    if (cant <= cant_vieja) {
                        JOptionPane.showMessageDialog(null, "La cantidad ingresada no debe ser menor o igual a la cantidad actual.", "Error cantidad", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (cbxPeso.isSelected()) {
                    Double peso_viejo = producto.getPeso();
                    Double pes = Double.parseDouble(txtPeso.getText().trim());
                    if (pes <= 0) {
                        JOptionPane.showMessageDialog(null, "Ingrese el peso correctamente.", "Error peso", JOptionPane.ERROR_MESSAGE);
                    }

                }
                int preC = 0;
                String verdad, aux = txtPrecioComprado.getText().trim();
                verdad = aux.replace(".", "");
                preC = Integer.parseInt(verdad);

                if (cbxPrecioComprado.isSelected()) {
                    if (preC <= 0) {
                        JOptionPane.showMessageDialog(null, "Ingrese el precio comprado correctamente.", "Error precio de compra", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                int preV = 0;
                String verdad2, aux2 = txtPrecioVenta.getText().trim();
                verdad2 = aux2.replace(".", "");
                preV = Integer.parseInt(verdad2);

                if (cbxPrecioVenta.isSelected()) {
                    if (preV <= 0) {
                        JOptionPane.showMessageDialog(null, "Ingrese el precio de venta correctamente.", "Error precio de venta", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (preC >= preV) {
                    JOptionPane.showMessageDialog(null, "El precio de venta no puede ser menor o igual al precio comprado, no tendra ganancias.", "Error precios", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                ProductoDao productoDao = new ProductoDaoImpl();
                Producto producto = new Producto();
                int resp = productoDao.actualizar(txtMarca.getText().trim(), txtNombre.getText().trim(), cant, Double.parseDouble(txtPeso.getText().trim()), preC, preV, txtBuscar.getText().trim());

                cbxCantidad.setEnabled(false);
                cbxMarca.setEnabled(false);
                cbxNombre.setEnabled(false);
                cbxPeso.setEnabled(false);
                cbxPrecioComprado.setEnabled(false);
                cbxPrecioVenta.setEnabled(false);

                btnActualizar.setEnabled(false);
                if (resp > 0) {
                    JOptionPane.showMessageDialog(this, "Producto Actualizado Correctamente");
                    limpiar();

                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo actualizar", "Error Datos", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe ingresar el codigo del producto", "Campo Vacio", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            System.err.println("Error al actualizar " + e);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtBuscarActionPerformed

    private void txtBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBuscarMouseClicked
        // Cuando presiona en el textbox de buscar, se limpia este.
        if (txtBuscar.getText().equals("Ingrese Codigo")) {
            txtBuscar.setText("");
        }
    }//GEN-LAST:event_txtBuscarMouseClicked

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        //Metodo de validacion para el codigo del producto, solo numeros.
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {

            evt.consume();
            JOptionPane.showMessageDialog(null, "No puede ingresar Letras!!!", "Error Datos", JOptionPane.ERROR_MESSAGE);
        }

        int total = txtBuscar.getText().trim().length();
        if (total > 18) {
            evt.consume();
        }
    }//GEN-LAST:event_txtBuscarKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Boton que limpiar y cierra el mantenedor  actualizar
        limpiar();
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void txtMarcaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMarcaKeyTyped
        // TODO add your handling code here:
        int total = txtMarca.getText().trim().length();
        if (total > 19) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMarcaKeyTyped

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
        int total = txtNombre.getText().trim().length();
        if (total > 39) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        // TODO add your handling code here:
        int total = txtCantidad.getText().trim().length();
        if (total > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void txtPesoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesoKeyTyped
        // TODO add your handling code here:
        int total = txtPeso.getText().trim().length();
        if (total > 3) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPesoKeyTyped

    private void txtPrecioCompradoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompradoKeyTyped
        // TODO add your handling code here:
        int total = txtPrecioComprado.getText().trim().length();
        if (total > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioCompradoKeyTyped

    private void txtPrecioVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaKeyTyped
        // TODO add your handling code here:
        int total = txtPrecioVenta.getText().trim().length();
        if (total > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioVentaKeyTyped

    private void txtCantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyReleased
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtCantidad.getText().trim();
        if (!texto.equals("")) {

            textoNuevo = texto.replace(".", "");

            String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));

            txtCantidad.setText(ff);
        }
    }//GEN-LAST:event_txtCantidadKeyReleased

    private void txtPrecioCompradoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompradoKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtPrecioComprado.getText().trim();
        if (!texto.equals("")) {

            textoNuevo = texto.replace(".", "");

            String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));

            txtPrecioComprado.setText(ff);
        }
    }//GEN-LAST:event_txtPrecioCompradoKeyReleased

    private void txtPrecioVentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtPrecioVenta.getText().trim();
        if (!texto.equals("")) {

            textoNuevo = texto.replace(".", "");

            String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));

            txtPrecioVenta.setText(ff);
        }
    }//GEN-LAST:event_txtPrecioVentaKeyReleased

    private void cbxPesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxPesoActionPerformed

    private void cbxPrecioVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPrecioVentaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxPrecioVentaActionPerformed

    public void cerrar() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(rootPane, "Desea cerrar la ventana", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) {
            dispose();
        } else {
        }
    }

    public void limpiar() {
        //Limpia cada uno de los textbox y checkboxs.
        txtBuscar.setText("Ingrese Codigo");
        txtMarca.setText("");
        txtMarca.setEnabled(false);
        txtNombre.setText("");
        txtNombre.setEnabled(false);
        txtCantidad.setText("");
        txtCantidad.setEnabled(false);
        txtPeso.setText("");
        txtPeso.setEnabled(false);
        txtPrecioComprado.setText("");
        txtPrecioComprado.setEnabled(false);
        txtPrecioVenta.setText("");
        txtPrecioVenta.setEnabled(false);

        cbxMarca.setSelected(false);
        cbxNombre.setSelected(false);
        cbxCantidad.setSelected(false);
        cbxPeso.setSelected(false);
        cbxPrecioComprado.setSelected(false);
        cbxPrecioVenta.setSelected(false);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorActualizarProductos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorActualizarProductos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorActualizarProductos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorActualizarProductos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MantenedorActualizarProductos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JCheckBox cbxCantidad;
    private javax.swing.JCheckBox cbxMarca;
    private javax.swing.JCheckBox cbxNombre;
    private javax.swing.JCheckBox cbxPeso;
    private javax.swing.JCheckBox cbxPrecioComprado;
    private javax.swing.JCheckBox cbxPrecioVenta;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtPrecioComprado;
    private javax.swing.JTextField txtPrecioVenta;
    // End of variables declaration//GEN-END:variables
}
