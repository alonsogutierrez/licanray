/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import Controlador.CajaDao;
import Controlador.CajaDaoImpl;
import Controlador.ConfiguracionDao;
import Controlador.ConfiguracionDaoImpl;
import Controlador.GastosExtrasDao;
import Controlador.GastosExtrasDaoImpl;
import Controlador.ProductoDao;
import Controlador.ProductoDaoImpl;
import Controlador.UsuarioDao;
import Controlador.UsuarioDaoImpl;

import Modelo.Producto;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static licanray.LicanRay.caja;
import static licanray.LicanRay.usuario;

/**
 *
 * @author cristian
 */
public class MantenedorMenuPrincipal extends javax.swing.JFrame {

    int total = 0;   //Variable que tiene el total de la compra.
    int cantidadProductos = 0; // Variable que contiene el total de productos vendidos.
    Double pesoTotalProductos = 0.0; //Variable que contiene el peso total de productos vendidos.
    int costosTotales = 0; //Variable que contiene los costos totales de los productos vendidos.
    Producto producto = new Producto();
    ProductoDao productoDao = new ProductoDaoImpl();
    ArrayList<Integer> lista = new ArrayList(); //Lista que guarda los subtotales de cada producto.
    ArrayList<Integer> listaCantidad = new ArrayList(); //Lista que guarda las cantidades de cada producto.
    ArrayList<Integer> precio = new ArrayList();  //Lista que guarda los precios venta de cada producto.
    ArrayList<String> codigo = new ArrayList();  //Lista que guarda los codigos de cada producto.
    ArrayList<Double> listaPeso = new ArrayList<>(); //Lista que guarda el peso de cada producto.
    ArrayList<Integer> listaCostos = new ArrayList();  //Lista que guarda el costo de cada producto.
    int s = 0; //Contiene el valor de la fila seleccionada de la tabla ventas.
    MantenedorPago mantenedorPago = new MantenedorPago();
    ConfiguracionDao mantenedorConfig = new ConfiguracionDaoImpl();

    /**
     * Creates new form MenuPrincipal
     */
    public MantenedorMenuPrincipal() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        txtAgregarProducto.requestFocus(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblNombreVendedor = new javax.swing.JLabel();
        lblCargoUsuario = new javax.swing.JLabel();
        btnCerrarSesion = new javax.swing.JButton();
        btnAdminVentas = new javax.swing.JButton();
        btnReportes = new javax.swing.JButton();
        btnAdminUsuarios = new javax.swing.JButton();
        btnGastosExtras = new javax.swing.JButton();
        btnVerificadorPrecios = new javax.swing.JButton();
        JScrollVenta = new javax.swing.JScrollPane();
        tbVenta = new javax.swing.JTable();
        lblFecha = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnCambiarCantidad = new javax.swing.JButton();
        txtAgregarProducto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        cmbProductos = new javax.swing.JComboBox();
        txtCantidad = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnEliminarProducto = new javax.swing.JButton();
        btnCobrar = new javax.swing.JButton();
        lblFechaReal = new javax.swing.JLabel();
        btnRetirarDinero = new javax.swing.JButton();
        btnCerrarCaja = new javax.swing.JButton();
        btnConfiguraciones = new javax.swing.JButton();
        btnBuscador = new javax.swing.JButton();
        btnContacto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Menu Principal");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Usuario:");

        lblNombreVendedor.setText("Nombre del Vendedor");

        lblCargoUsuario.setText("cargoUsuario");

        btnCerrarSesion.setText("Cerrar Sesi√≥n");
        btnCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionActionPerformed(evt);
            }
        });

        btnAdminVentas.setText("Administrar Ventas");
        btnAdminVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminVentasActionPerformed(evt);
            }
        });

        btnReportes.setText("Reportes");
        btnReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportesActionPerformed(evt);
            }
        });

        btnAdminUsuarios.setText("Administrar Usuarios");
        btnAdminUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminUsuariosActionPerformed(evt);
            }
        });

        btnGastosExtras.setText("Gastos Extras");
        btnGastosExtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGastosExtrasActionPerformed(evt);
            }
        });

        btnVerificadorPrecios.setText("Verificador de Precios");
        btnVerificadorPrecios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificadorPreciosActionPerformed(evt);
            }
        });

        tbVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Producto", "Marca", "Precio Unidad/Kg", "Cantidad/Peso Kg", "Sub Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbVenta.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbVenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tbVentaFocusGained(evt);
            }
        });
        JScrollVenta.setViewportView(tbVenta);

        lblFecha.setText("Fecha");

        btnAgregar.setText("Agregar Producto");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnCambiarCantidad.setText("Cambiar Cantidad/Peso");
        btnCambiarCantidad.setEnabled(false);
        btnCambiarCantidad.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnCambiarCantidadStateChanged(evt);
            }
        });
        btnCambiarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarCantidadActionPerformed(evt);
            }
        });

        txtAgregarProducto.setText("Ingrese Codigo");
        txtAgregarProducto.setToolTipText("Ingrese Codigo");
        txtAgregarProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAgregarProductoMouseClicked(evt);
            }
        });
        txtAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgregarProductoActionPerformed(evt);
            }
        });
        txtAgregarProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAgregarProductoKeyTyped(evt);
            }
        });

        jLabel2.setText("Total");

        lblTotal.setText("$ 0");

        cmbProductos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Menu de Productos", "Agregar Productos", "Actualizar Productos" }));
        cmbProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProductosActionPerformed(evt);
            }
        });

        txtCantidad.setToolTipText("Ingrese la Cantidad del Producto");
        txtCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadActionPerformed(evt);
            }
        });
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantidadKeyReleased(evt);
            }
        });

        jLabel3.setText("Cantidad del producto:");

        btnEliminarProducto.setText("Eliminar Producto");
        btnEliminarProducto.setEnabled(false);
        btnEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProductoActionPerformed(evt);
            }
        });

        btnCobrar.setText("Cobrar");
        btnCobrar.setEnabled(false);
        btnCobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobrarActionPerformed(evt);
            }
        });

        lblFechaReal.setText("jLabel4");

        btnRetirarDinero.setText("Retirar Dinero");
        btnRetirarDinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirarDineroActionPerformed(evt);
            }
        });

        btnCerrarCaja.setText("Cerrar Caja");
        btnCerrarCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarCajaActionPerformed(evt);
            }
        });

        btnConfiguraciones.setText("Configuraciones");
        btnConfiguraciones.setEnabled(false);
        btnConfiguraciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfiguracionesActionPerformed(evt);
            }
        });

        btnBuscador.setText("Buscador");
        btnBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscadorActionPerformed(evt);
            }
        });

        btnContacto.setText("Contacto");
        btnContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContactoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnVerificadorPrecios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(btnAdminUsuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbProductos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGastosExtras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReportes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdminVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCerrarSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRetirarDinero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCerrarCaja, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCargoUsuario)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblNombreVendedor)
                                .addGap(65, 65, 65)
                                .addComponent(lblFecha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblFechaReal, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel3))
                                    .addComponent(btnEliminarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAgregarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                    .addComponent(txtCantidad))
                                .addGap(18, 18, 18)
                                .addComponent(btnCambiarCantidad))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(66, 66, 66)
                                .addComponent(lblTotal))
                            .addComponent(JScrollVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnConfiguraciones, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(btnBuscador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnContacto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblNombreVendedor)
                    .addComponent(lblFechaReal)
                    .addComponent(lblFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCargoUsuario)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnConfiguraciones)
                                .addGap(33, 33, 33)
                                .addComponent(btnBuscador)
                                .addGap(32, 32, 32)
                                .addComponent(btnContacto))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCerrarSesion)
                                .addGap(31, 31, 31)
                                .addComponent(btnAdminVentas)
                                .addGap(29, 29, 29)
                                .addComponent(btnReportes)
                                .addGap(29, 29, 29)
                                .addComponent(cmbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(btnAdminUsuarios)
                                .addGap(27, 27, 27)
                                .addComponent(btnGastosExtras)
                                .addGap(34, 34, 34)
                                .addComponent(btnVerificadorPrecios))
                            .addComponent(JScrollVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAgregar))
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(btnRetirarDinero)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblTotal))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCobrar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(btnCerrarCaja)
                        .addComponent(btnCambiarCantidad)))
                .addGap(18, 18, 18)
                .addComponent(btnEliminarProducto)
                .addGap(81, 81, 81))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProductosActionPerformed
        //Metodo para seleccionar unas de las opciones del listbox productos.
        if (cmbProductos.getSelectedIndex() == 1) {
            MantenedorAgregarProducto mantenedorAgregarProducto = new MantenedorAgregarProducto();
            mantenedorAgregarProducto.setVisible(true);
        }
        if (cmbProductos.getSelectedIndex() == 2) {
            MantenedorActualizarProductos actualizarProductos = new MantenedorActualizarProductos();
            actualizarProductos.setVisible(true);
        }

    }//GEN-LAST:event_cmbProductosActionPerformed

    private void txtAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgregarProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgregarProductoActionPerformed

    private void txtAgregarProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgregarProductoKeyTyped
        // Metodo para validar que en el agregar productos se ingresen solo numeros, en este caso solo codigo.
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "No puede ingresar Letras!!!", "Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        int largo = txtAgregarProducto.getText().trim().length();
        if (largo >= 13) {
            evt.consume();
        }
    }//GEN-LAST:event_txtAgregarProductoKeyTyped

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Boton que agrega un producto a la tabla para su venta.
        try {

            if (!txtAgregarProducto.getText().trim().equals("") && !txtAgregarProducto.getText().trim().equals("Ingrese Codigo")) {

                //Verificamos si existe el codigo en la base de datos.
                if (!productoDao.verificarProducto(txtAgregarProducto.getText().trim())) {
                    JOptionPane.showMessageDialog(null, "El codigo no existe en la base de datos", "Error Codigo", JOptionPane.ERROR_MESSAGE);
                } else {
                    //Si el codigo existe en la base de datos, podemos continuar.
                    //int cantidad_nueva = Integer.parseInt(String.valueOf(txtCantidad.getText().trim()));

                    String code = txtAgregarProducto.getText().trim();
                    //Verificar esta parte cuando compruebe si el codigo ya esta en la lista.
                    //Si el codigo no esta agregado en la venta.
                    if (!codigo.contains(code)) {

                        int id_prod = productoDao.idProducto(code);

                        //Se consulta por el tipo de producto, si es de peso entonces ser√° 1 y si es de cantidad sera 0.
                        if (productoDao.tipoProducto(id_prod) == 0) {
                            MantenedorAgregarPeso mantenedorAgregarPeso = new MantenedorAgregarPeso();
                            mantenedorAgregarPeso.setVisible(true);
                            DecimalFormat formateador = new DecimalFormat("###,###");
                            producto = productoDao.agregarProductoALaVenta(code);
                            String nombre_prod = producto.getNombre();
                            String marca_prod = producto.getMarca();
                            String peso_total_prod = String.valueOf(producto.getPeso());
                            int precioKg = producto.getPrecioVenta();
                            String ff1 = formateador.format(precioKg);
                            mantenedorAgregarPeso.lblNombreProd.setText(nombre_prod);
                            mantenedorAgregarPeso.lblMarcaProd.setText(marca_prod);
                            mantenedorAgregarPeso.lblPrecioKg.setText(ff1);
                            mantenedorAgregarPeso.lblPesoTot.setText(peso_total_prod);
                        } else {
                            //Sino ingreso cantidad, quiere decir que la cantidad sera 1 por default.
                            if (txtCantidad.getText().trim().equals("")) {
                                txtCantidad.setText("1");
                                int cantidad_nueva = 1;
                                int cantidad_vieja = productoDao.verificarCantidad(code);

                                //Si la cantidad ingresada no supera lo que queda en stock, podemos continuar.
                                if (cantidad_nueva <= cantidad_vieja) {

                                    producto = productoDao.agregarProductoALaVenta(txtAgregarProducto.getText().trim());
                                    DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();

                                    Object[] columna = new Object[6];
                                    columna[0] = producto.getCodigo();
                                    columna[1] = producto.getNombre();
                                    columna[2] = producto.getMarca();

                                    int precioVenta = Integer.parseInt(String.valueOf(producto.getPrecioVenta()));
                                    DecimalFormat formateador = new DecimalFormat("###,###");
                                    String ff1 = formateador.format(precioVenta);
                                    columna[3] = ff1;

                                    int cantidadFinal = Integer.parseInt(String.valueOf(cantidad_nueva));
                                    String ff2 = formateador.format(cantidadFinal);
                                    columna[4] = ff2;

                                    int precioFinal = Integer.parseInt(String.valueOf(cantidad_nueva)) * producto.getPrecioVenta();
                                    String ff3 = formateador.format(precioFinal);
                                    columna[5] = ff3;

                                    int costoFinal = producto.getPrecioCompra() * cantidadFinal;
                                    System.out.println("precioCompra: " + producto.getPrecioCompra());
                                    System.out.println("cant Final: " + cantidadFinal);
                                    System.out.println("costoFinal: " + costoFinal);

                                    //Agregar lista de costos por cada producto.
                                    listaCantidad.add(Integer.parseInt(String.valueOf(cantidad_nueva)));
                                    precio.add(Integer.parseInt(String.valueOf(precioVenta)));
                                    codigo.add(String.valueOf(columna[0]));
                                    lista.add(Integer.parseInt(String.valueOf(precioFinal)));
                                    listaPeso.add(0.0);
                                    listaCostos.add(costoFinal);
                                    modelo.addRow(columna);
                                    tbVenta.setModel(modelo);

                                    int w = modelo.getRowCount();
                                    System.out.println("w row count: " + w);

                                    if (w > 0) {
                                        btnCobrar.setEnabled(true);
                                        btnEliminarProducto.setEnabled(true);
                                        btnCambiarCantidad.setEnabled(true);
                                    } else {
                                        btnCobrar.setEnabled(false);
                                        btnEliminarProducto.setEnabled(false);
                                        btnCambiarCantidad.setEnabled(false);
                                    }
                                    limpiar();

                                    total = getTotal() + Integer.parseInt(String.valueOf(precioFinal));
                                    cantidadProductos = cantidadProductos + listaCantidad.get(w - 1);
                                    //Se le resta 1 a 'w' dado que es una lista y la primera posici√≥n comienza desde el 0.
                                    pesoTotalProductos = pesoTotalProductos + listaPeso.get(w - 1);
                                    //costosTotales = costosTotales + listaCostos.get(w - 1);

                                    String texto = String.valueOf(total);
                                    String f1 = formateador.format(Double.parseDouble(texto));

                                    lblTotal.setText(String.valueOf("$" + f1));
                                } else {
                                    JOptionPane.showMessageDialog(null, "Tiene " + cantidad_vieja + " productos almacenado, no puede vender mas", "Problema de cantidad", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                String real, textocant = txtCantidad.getText().trim();
                                real = textocant.replace(".", "");
                                int cantidadFinal = Integer.parseInt(real);
                                if (cantidadFinal > 0) {
                                    int cantidad_vieja = productoDao.verificarCantidad(code);
                                    int cantidad_nueva = cantidadFinal;
                                    if (cantidad_nueva <= cantidad_vieja) {

                                        producto = productoDao.agregarProductoALaVenta(txtAgregarProducto.getText().trim());
                                        DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();

                                        Object[] columna = new Object[6];
                                        columna[0] = producto.getCodigo();
                                        columna[1] = producto.getNombre();
                                        columna[2] = producto.getMarca();

                                        int precioVenta = Integer.parseInt(String.valueOf(producto.getPrecioVenta()));
                                        DecimalFormat formateador = new DecimalFormat("###,###");
                                        String ff1 = formateador.format(precioVenta);
                                        columna[3] = ff1;

                                        String ff2 = formateador.format(cantidadFinal);
                                        columna[4] = ff2;

                                        int precioFinal = Integer.parseInt(String.valueOf(cantidadFinal)) * producto.getPrecioVenta();
                                        String ff3 = formateador.format(precioFinal);
                                        columna[5] = ff3;
                                        
                                        int costoFinal = producto.getPrecioCompra() * cantidadFinal; 
                                        System.out.println("precioCompra: " + producto.getPrecioCompra());
                                        System.out.println("cant Final: " + cantidadFinal);
                                        System.out.println("costoFinal: " + costoFinal);

                                        listaCantidad.add(Integer.parseInt(String.valueOf(cantidadFinal)));
                                        precio.add(Integer.parseInt(String.valueOf(precioVenta)));
                                        codigo.add(String.valueOf(columna[0]));
                                        lista.add(Integer.parseInt(String.valueOf(precioFinal)));
                                        listaPeso.add(0.0);
                                        listaCostos.add(costoFinal);
                                        modelo.addRow(columna);
                                        tbVenta.setModel(modelo);

                                        int w = modelo.getRowCount();

                                        if (w > 0) {
                                            btnCobrar.setEnabled(true);
                                            btnEliminarProducto.setEnabled(true);
                                            btnCambiarCantidad.setEnabled(true);
                                        } else {
                                            btnCobrar.setEnabled(false);
                                            btnEliminarProducto.setEnabled(false);
                                            btnCambiarCantidad.setEnabled(false);
                                        }
                                        limpiar();

                                        total = getTotal() + Integer.parseInt(String.valueOf(precioFinal));
                                        cantidadProductos = cantidadProductos + listaCantidad.get(w - 1);

                                        //Se le resta 1 a 'w' dado que es una lista y la primera posici√≥n comienza desde el 0.
                                        pesoTotalProductos = pesoTotalProductos + listaPeso.get(w - 1);
                                        costosTotales = costosTotales + listaCostos.get(w - 1);

                                        String texto = String.valueOf(total);
                                        String f1 = formateador.format(Double.parseDouble(texto));

                                        lblTotal.setText(String.valueOf("$" + f1));
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Tiene " + cantidad_vieja + " productos almacenado, no puede vender mas", "Problema de cantidad", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Debe ingresar una cantidad mayor que cero", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Producto ya ingresado, porfavor cambie solo la cantidad de √©ste.", "Producto ingresado", JOptionPane.ERROR_MESSAGE);
                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese un codigo", "Error Codigo", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            System.err.println("Error al agregar productos en la venta: " + e);
        }


    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadActionPerformed

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        // Metodo para validar que en la cantidad se ingresen solo numeros.
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo puede ingresar n√∫meros!!!", "Error Datos", JOptionPane.ERROR_MESSAGE);
        }

        int largo = txtCantidad.getText().trim().length();
        if (largo > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void btnEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProductoActionPerformed
        // Boton que elimina un producto seleccionado de la tabla.
        DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();
        s = tbVenta.getSelectedRow();

        if (s >= 0) {
            int ax = JOptionPane.showConfirmDialog(null, "¬øEsta seguro que desea eliminar el producto seleccionado?", "Confirmar Producto", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (ax == JOptionPane.YES_OPTION) {
                total = total - lista.get(s);
                cantidadProductos = cantidadProductos - listaCantidad.get(s);
                costosTotales = costosTotales - listaCostos.get(s);
                pesoTotalProductos = pesoTotalProductos - listaPeso.get(s);
                listaCostos.remove(s);
                listaPeso.remove(s);
                lista.remove(s);
                listaCantidad.remove(s);
                codigo.remove(s);
                precio.remove(s);
                DecimalFormat formateador = new DecimalFormat("###,###");
                int total = getTotal();
                String f1 = formateador.format(total);
                lblTotal.setText(String.valueOf("$" + f1));
                modelo.removeRow(tbVenta.getSelectedRow());
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto a eliminar", "Boton Eliminar", JOptionPane.ERROR_MESSAGE);
        }

        int w = modelo.getRowCount();
        if (w > 0) {
            btnCambiarCantidad.setEnabled(true);
            btnCobrar.setEnabled(true);
        } else {
            btnCambiarCantidad.setEnabled(false);
            btnCobrar.setEnabled(false);
        }

         //total = total - Integer.parseInt(String.valueOf(columna[4]));
        //lista.remove(s);

    }//GEN-LAST:event_btnEliminarProductoActionPerformed

    private void txtAgregarProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAgregarProductoMouseClicked
        // Metodo que se encarga de limpiar el textbox de agregar producto al hacer click sobre el, cuando aun no se han ingresado codigos.
        if (txtAgregarProducto.getText().trim().equals("Ingrese Codigo")) {
            txtAgregarProducto.setText("");
        }
    }//GEN-LAST:event_txtAgregarProductoMouseClicked

    private void tbVentaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbVentaFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_tbVentaFocusGained

    private void btnCambiarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarCantidadActionPerformed
        // Metodo que cambia la cantidad de un producto en la lista del defaultmodeler, y actualiza el total.
        DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();
        s = tbVenta.getSelectedRow();

        //Si escojio un producto de la lista lo podemos cambiar.
        if (s >= 0) {

            String code = codigo.get(s);
            int id_prod = productoDao.idProducto(code);

            int tipo_prod = productoDao.tipoProducto(id_prod);
            System.out.println("tipo prod: " + tipo_prod);

            //Si el tipo de producto es 1, entonces se muestra mantenedor de actualizar peso, de lo contrario sigue como producto de cantidad
            if (tipo_prod == 0) {
                MantenedorActualizarPeso mantenedorActualizarPeso = new MantenedorActualizarPeso();
                mantenedorActualizarPeso.setVisible(true);
                DecimalFormat formateador = new DecimalFormat("###,###");
                producto = productoDao.agregarProductoALaVenta(code);
                int precioKg = producto.getPrecioVenta();
                String ff1 = formateador.format(precioKg);
                mantenedorActualizarPeso.lblNombreProd.setText(producto.getNombre());
                mantenedorActualizarPeso.lblMarcaProd.setText(producto.getMarca());
                mantenedorActualizarPeso.lblPrecioKg.setText(ff1);
                mantenedorActualizarPeso.lblPesoActual.setText(String.valueOf(listaPeso.get(s)));
                mantenedorActualizarPeso.lblPesoTotal.setText(String.valueOf(producto.getPeso()));

            } else {
                String canNueva, texto = txtCantidad.getText().trim();
                canNueva = texto.replace(".", "");
                int cantNewInt = Integer.parseInt(canNueva);
                if (!canNueva.equals("")) {
                    if (cantNewInt > 0) {

                        int cantidad_vieja = productoDao.verificarCantidad(code);

                        if (cantNewInt <= cantidad_vieja) {
                            DecimalFormat formateador = new DecimalFormat("###,###");

                            //obtenemos la cantidad antigua
                            //Ingresamos el valor de la cantidad que queremos cambiar
                            int cantidadVieja = listaCantidad.get(s);
                            int costoNew = producto.getPrecioCompra() * cantNewInt;
                            int costoViejo = producto.getPrecioCompra() * cantidad_vieja;
                            int diferencia = costoNew - costoViejo;

                            // se cambia la cantidad antigua por la nueva
                            listaCantidad.set(s, cantNewInt);
                            listaCostos.set(s, costoNew);
                            //Obtenemos el subtotal nuev
                            lista.set(s, listaCantidad.get(s) * precio.get(s));

                            int subTotalViejo = cantidadVieja * precio.get(s);
                            int subTotalNuevo = lista.get(s);

                            total = getTotal() - (subTotalViejo - subTotalNuevo);
                            cantidadProductos = cantidadProductos - (cantidadVieja - cantNewInt);
                            costosTotales = costosTotales - diferencia;

                            String texto01 = String.valueOf(cantNewInt);
                            String ff01 = formateador.format(Double.parseDouble(texto01));
                            String texto02 = String.valueOf(subTotalNuevo);
                            String ff02 = formateador.format(Double.parseDouble(texto02));

                            modelo.setValueAt(ff01, s, 4);
                            modelo.setValueAt(ff02, s, 5);
                            modelo.fireTableDataChanged();

                            String texto2 = String.valueOf(total);
                            String ff = formateador.format(Double.parseDouble(texto2));

                            lblTotal.setText(String.valueOf("$" + ff));
                            limpiar();

                        } else {
                            JOptionPane.showMessageDialog(null, "Tiene " + cantidad_vieja + " productos almacenado, no puede vender mas", "Problema de cantidad", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor que cero.", "Boton Cambiar Cantidad", JOptionPane.ERROR_MESSAGE);
                        limpiar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese la cantidad que desea cambiar.", "Boton Cambiar Cantidad", JOptionPane.ERROR_MESSAGE);
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un Producto de la lista", "Boton Cambiar Cantidad", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCambiarCantidadActionPerformed

    private void btnCambiarCantidadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnCambiarCantidadStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_btnCambiarCantidadStateChanged

    private void btnCobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobrarActionPerformed
        // TODO add your handling code here:

        // sub total de cada producto.
        DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();// obtenemos el total de filas agregadas.
        int items = tbVenta.getRowCount();
        System.out.println("cantProd: " + cantidadProductos);
        mantenedorPago = new MantenedorPago(getTotal(), cantidadProductos, codigo, producto.getCantidad(), items, listaCantidad, lista, modelo, precio, listaPeso, listaCostos, costosTotales);
        mantenedorPago.setVisible(true);

        //setTotal(0);
        //lblTotal.setText("0");

    }//GEN-LAST:event_btnCobrarActionPerformed

    private void btnAdminUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminUsuariosActionPerformed
        // TODO add your handling code here:
        MantenedorAministrarUsuarios mantenedorAministrarUsuarios = new MantenedorAministrarUsuarios();
        mantenedorAministrarUsuarios.setVisible(true);
    }//GEN-LAST:event_btnAdminUsuariosActionPerformed

    private void btnCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionActionPerformed
        // TODO add your handling code here:
        int ax = JOptionPane.showConfirmDialog(null, "¬øEsta seguro que desea cerrar sesion?", "Confirmar sesion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (ax == JOptionPane.YES_NO_OPTION) {
            CajaDao cajaDao = new CajaDaoImpl();
            GastosExtrasDao gastosExtrasDao = new GastosExtrasDaoImpl();
            UsuarioDao usuarioDao = new UsuarioDaoImpl();
            int idUsuario = usuarioDao.idUsuario(usuario.getNombre());
            int idCaja = cajaDao.idCaja(idUsuario);
            String real, noreal = String.valueOf(caja.getDinero());
            real = noreal.replace(".", "");
            int totalVentas = Integer.parseInt(real);
            int totalGastosExtras = gastosExtrasDao.gastosCaja(idCaja);
            //cajaDao.cerrarCaja(totalVentas, totalGastosExtras, idCaja);
            licanray.LicanRay.usuario.setCargo("");
            licanray.LicanRay.usuario.setClave("");
            licanray.LicanRay.usuario.setEstado(Byte.parseByte("0"));
            licanray.LicanRay.usuario.setIdUsuario(0);
            licanray.LicanRay.usuario.setNombre("");
            licanray.LicanRay.mantenedorMenuPrincipal.dispose();
            licanray.LicanRay.mantenedorLogin.setVisible(true);
        }
    }//GEN-LAST:event_btnCerrarSesionActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void btnGastosExtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGastosExtrasActionPerformed
        // TODO add your handling code here:
        MantenedorGastosExtras mantenedorGastosExtras = new MantenedorGastosExtras();
        mantenedorGastosExtras.setVisible(true);
    }//GEN-LAST:event_btnGastosExtrasActionPerformed

    private void btnVerificadorPreciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificadorPreciosActionPerformed
        // TODO add your handling code here:
        MantenedorVerificarPrecio mantenedorVerificarPrecio = new MantenedorVerificarPrecio();
        mantenedorVerificarPrecio.setVisible(true);
    }//GEN-LAST:event_btnVerificadorPreciosActionPerformed

    private void btnReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportesActionPerformed
        // TODO add your handling code here:
        MantenedorReportes mantenedorReportes = new MantenedorReportes();
        mantenedorReportes.setVisible(true);
    }//GEN-LAST:event_btnReportesActionPerformed

    private void btnRetirarDineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirarDineroActionPerformed
        // TODO add your handling code here:
        MantenedorRetirarDinero mantenedorRetirarDinero = new MantenedorRetirarDinero();
        mantenedorRetirarDinero.setVisible(true);
        DecimalFormat formateador = new DecimalFormat("###,###");
        CajaDao cajaAux = new CajaDaoImpl();
        UsuarioDao user1 = new UsuarioDaoImpl();
        int id_user = user1.idUsuario(lblNombreVendedor.getText().trim());
        String aux = String.valueOf(cajaAux.dineroActualCaja(id_user));
        String ff = formateador.format(Integer.parseInt(aux));
        mantenedorRetirarDinero.lblDineroActualCaja.setText(ff);
    }//GEN-LAST:event_btnRetirarDineroActionPerformed

    private void btnCerrarCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarCajaActionPerformed
        // TODO add your handling code here:
        CajaDao cajaDao = new CajaDaoImpl();
        GastosExtrasDao gastosDao = new GastosExtrasDaoImpl();
        UsuarioDao usuarioDao = new UsuarioDaoImpl();
        String nombre = usuario.getNombre();

        int usuarioActual = usuarioDao.idUsuario(nombre); //Obtenemos el id del usuario actual. 
        int idCaja = cajaDao.idCaja(usuarioActual); //Obtenemos el id de la caja actual que utiliza el usuario.
        int totalRetiros = cajaDao.totalRetiros(idCaja); //Total de retiros.
        int totalVentas = cajaDao.totalVentas(idCaja);  //Total de ventas.
        int dineroInicio = cajaDao.dineroInicio(idCaja); //Dinero inicial o apertura de caja.
        int totalGastosExtras = gastosDao.gastosCaja(idCaja); //Total de gastos extras por el id de la caja.
        int totalDia = dineroInicio + totalVentas - totalRetiros - totalGastosExtras; //Total del dia.
        int dineroCaja = cajaDao.dineroActualCaja(usuarioActual); //Dinero actual en caja.
        int costosTot = costosTotales; //Obtenemos los costos totales de todos los productos vendidos.
        System.out.println("costosTot: " + costosTotales);
        int utilidad = totalVentas - (costosTot + totalGastosExtras); //Utilidad final de productos vendidos.

        MantenedorCerraCaja mantenedorCerraCaja = new MantenedorCerraCaja();
        mantenedorCerraCaja.setVisible(true);
        DecimalFormat formateador = new DecimalFormat("###,###");

        String textoNuevo, texto = String.valueOf(totalVentas);  //Total ventas
        String textoNuevo2, texto2 = String.valueOf(dineroInicio); //Dinero inicio o apertura caja.
        String textoNuevo3, texto3 = String.valueOf(totalDia); //Total del d√≠a o de la caja.
        String textoNuevo4, texto4 = String.valueOf(totalRetiros); //Total de retiros.
        String textoNuevo5, texto5 = String.valueOf(dineroCaja); //Dinero actual en caja.
        String textoNuevo6, texto6 = String.valueOf(utilidad); //Utilidad marginal o total.
        String textoNuevo7, texto7 = String.valueOf(totalGastosExtras); //Total de gastos extras.
        String textoNuevo8, texto8 = String.valueOf(costosTot); //Total de costos totales.

        if (!texto.equals("")) {
            textoNuevo = texto.replace(".", "");
            textoNuevo2 = texto2.replace(".", "");
            textoNuevo3 = texto3.replace(".", "");
            textoNuevo4 = texto4.replace(".", "");
            textoNuevo5 = texto5.replace(".", "");
            textoNuevo6 = texto6.replace(".", "");
            textoNuevo7 = texto7.replace(".", "");
            textoNuevo8 = texto8.replace(".", "");

            String ff = formateador.format(Double.parseDouble(textoNuevo)); //Total ventas.
            String ff2 = formateador.format(Double.parseDouble(textoNuevo2)); //Dinero inicio o apertura caja.
            String ff3 = formateador.format(Double.parseDouble(textoNuevo3)); //Total del d√≠a o de la caja.
            String ff4 = formateador.format(Double.parseDouble(textoNuevo4)); //Total de retiros.
            String ff5 = formateador.format(Double.parseDouble(textoNuevo5)); //Dinero actual en caja.
            String ff6 = formateador.format(Double.parseDouble(textoNuevo6)); //Utilidad marginal o total.
            String ff7 = formateador.format(Double.parseDouble(textoNuevo7)); //Total de gastos extras.
            String ff8 = formateador.format(Double.parseDouble(textoNuevo8)); //Total de costos.

            //Actualizamos cada txt por el orden en que nos aparecen en el mantenedor cerrarCaja.
            mantenedorCerraCaja.txtAperturaCaja.setText(ff2);
            mantenedorCerraCaja.txtTotalVentas.setText(ff);
            mantenedorCerraCaja.txtTotalRetiros.setText(ff4);
            mantenedorCerraCaja.txtTotalDia.setText(ff3);
            mantenedorCerraCaja.txtDiferenciaCaja.setText(ff5);
            mantenedorCerraCaja.txtTotalVentas1.setText(ff);
            mantenedorCerraCaja.txtCostosTotales.setText(ff8);
            mantenedorCerraCaja.txtGastosExtras.setText(ff7);
            mantenedorCerraCaja.txtUtilidadCaja.setText(ff6);

        }
    }//GEN-LAST:event_btnCerrarCajaActionPerformed

    private void btnAdminVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminVentasActionPerformed
        // TODO add your handling code here:
        MantenedorAdministrarVentas administrarVentas = new MantenedorAdministrarVentas();
        administrarVentas.setVisible(true);
    }//GEN-LAST:event_btnAdminVentasActionPerformed

    private void txtCantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        if (!txtCantidad.getText().trim().equals("")) {
            String textoNuevo, texto = txtCantidad.getText().trim();
            textoNuevo = texto.replace(".", "");
            String ff = formateador.format(Double.parseDouble(textoNuevo));
            txtCantidad.setText(ff);
        }

    }//GEN-LAST:event_txtCantidadKeyReleased

    private void btnContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContactoActionPerformed
        // TODO add your handling code here:
        MantenedorContacto mantenedorContacto = new MantenedorContacto();
        mantenedorContacto.setVisible(true);
    }//GEN-LAST:event_btnContactoActionPerformed

    private void btnConfiguracionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfiguracionesActionPerformed
        // TODO add your handling code here:
        MantenedorConfiguraciones mantenedorConf = new MantenedorConfiguraciones();
        DecimalFormat formateador = new DecimalFormat("###,###");
        int prod_min = mantenedorConfig.CantProdMin();
        int din_min = mantenedorConfig.CantDineroMin();
        String ff = formateador.format(prod_min);
        String ff2 = formateador.format(din_min);
        mantenedorConf.txtConfiguracionProd.setText(ff);
        mantenedorConf.txtConfiguracionDin.setText(ff2);
        mantenedorConf.setVisible(true);

    }//GEN-LAST:event_btnConfiguracionesActionPerformed

    private void btnBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscadorActionPerformed
        // TODO add your handling code here:
        MantenedorBuscador mantenedorBuscador = new MantenedorBuscador();
        mantenedorBuscador.setVisible(true);
    }//GEN-LAST:event_btnBuscadorActionPerformed

    public void cerrar() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(rootPane, "Desea cerrar por completo la aplicaci√≥n", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else {
        }
    }

    public void limpiar() {
        //Metodo que se encargar de limpar los textbos de agregar producto y cantidad.
        txtAgregarProducto.setText("");
        txtCantidad.setText("");
    }

    public void limpiarTodo() {
        DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();
        int filas = modelo.getRowCount();
        for (int i = 0; i < filas; i++) {
            modelo.removeRow(0);
            lista.remove(i);
            listaCantidad.remove(i);
            codigo.remove(i);
            precio.remove(i);
        }

    }

    public int getTotal() {
        return this.total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorMenuPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorMenuPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorMenuPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorMenuPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MantenedorMenuPrincipal mantenedorMenuPrincipal = new MantenedorMenuPrincipal();
                mantenedorPago = new MantenedorPago();
                mantenedorMenuPrincipal.setVisible(true);
                DefaultTableModel modelo = (DefaultTableModel) tbVenta.getModel();

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JScrollPane JScrollVenta;
    protected javax.swing.JButton btnAdminUsuarios;
    protected javax.swing.JButton btnAdminVentas;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscador;
    protected javax.swing.JButton btnCambiarCantidad;
    private javax.swing.JButton btnCerrarCaja;
    private javax.swing.JButton btnCerrarSesion;
    protected javax.swing.JButton btnCobrar;
    protected javax.swing.JButton btnConfiguraciones;
    private javax.swing.JButton btnContacto;
    protected javax.swing.JButton btnEliminarProducto;
    private javax.swing.JButton btnGastosExtras;
    protected javax.swing.JButton btnReportes;
    private javax.swing.JButton btnRetirarDinero;
    private javax.swing.JButton btnVerificadorPrecios;
    protected javax.swing.JComboBox cmbProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    protected javax.swing.JLabel lblCargoUsuario;
    private javax.swing.JLabel lblFecha;
    protected javax.swing.JLabel lblFechaReal;
    protected javax.swing.JLabel lblNombreVendedor;
    public javax.swing.JLabel lblTotal;
    protected javax.swing.JTable tbVenta;
    protected javax.swing.JTextField txtAgregarProducto;
    private javax.swing.JTextField txtCantidad;
    // End of variables declaration//GEN-END:variables
}
