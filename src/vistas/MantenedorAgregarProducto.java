/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import Controlador.ProductoDao;
import Controlador.ProductoDaoImpl;
import Modelo.Producto;
import com.sun.java.swing.plaf.windows.resources.windows;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

/**
 *
 * @author cristian
 */
public class MantenedorAgregarProducto extends javax.swing.JFrame {

    private Producto producto;

    /**
     * Creates new form AgregarProducto
     */
    public MantenedorAgregarProducto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbMedida = new javax.swing.JComboBox();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        txtPrecioCompra = new javax.swing.JTextField();
        txtPrecioVenta = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtMarca = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Agregar Productos a la Bodega");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setText("Codigo:");

        jLabel3.setText("Nombre:");

        jLabel4.setText("Cantidad de unidades:");

        jLabel5.setText("Precio compra por unidad/Kg:");

        jLabel1.setText("Precio venta por unidad/Kg:");

        cbMedida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Medida", "Cantidad", "Peso" }));
        cbMedida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMedidaActionPerformed(evt);
            }
        });

        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoKeyTyped(evt);
            }
        });

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtCantidad.setEnabled(false);
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantidadKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });

        txtPrecioCompra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecioCompraKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioCompraKeyTyped(evt);
            }
        });

        txtPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecioVentaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioVentaKeyTyped(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel6.setText("Peso Total (Kg):");

        txtPeso.setToolTipText("Ingrese el peso en kg");
        txtPeso.setEnabled(false);
        txtPeso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesoKeyTyped(evt);
            }
        });

        jLabel7.setText("Medida:");

        jLabel8.setText("Marca:");

        txtMarca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMarcaKeyTyped(evt);
            }
        });

        jLabel9.setText("Ejemplo: 5.5");

        jLabel10.setText("$");

        jLabel11.setText("$");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11))
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCodigo)
                            .addComponent(cbMedida, 0, 148, Short.MAX_VALUE)
                            .addComponent(txtMarca)
                            .addComponent(txtNombre)
                            .addComponent(txtCantidad)
                            .addComponent(txtPeso)
                            .addComponent(txtPrecioCompra)
                            .addComponent(txtPrecioVenta, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbMedida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel1))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Boton para guardar un producto en la base de datos, el cual analiza los errores posibles antes de hacerlo.
        try {
            String cantSinPuntos, cant = txtCantidad.getText().trim();
            String preCSinPuntos, preC = txtPrecioCompra.getText().trim();
            String preVSinPuntos, preV = txtPrecioVenta.getText().trim();
            cantSinPuntos = cant.replace(".", "");
            preCSinPuntos = preC.replace(".", "");
            preVSinPuntos = preV.replace(".", "");
            
            if (txtCodigo.getText().trim().length() <= 20) {

                if (txtCodigo.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe Ingresar un codigo", "Error Datos", JOptionPane.ERROR_MESSAGE);
                    return;

                }
                if (txtMarca.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar la marca del producto", "Error Datos", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (txtNombre.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar el nombre del producto", "Error Datos", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (cbMedida.getSelectedItem().toString().equals("Seleccione Medida")) {
                    JOptionPane.showMessageDialog(this, "Seleccione una medida");
                    return;
                }

                if (txtCantidad.isEnabled()) {
                    if (cantSinPuntos.equals("")) {
                        JOptionPane.showMessageDialog(null, "Debe ingresar la cantidad", "Error Datos", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    if (txtPeso.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null, "Debe ingresar el peso", "Error Datos", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (preCSinPuntos.equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar precio de compra del producto", "Error Datos", JOptionPane.ERROR_MESSAGE);
                    return;

                }
                if (preVSinPuntos.equals("")) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar precio de venta del producto", "Error Datos", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                ProductoDao productoDao = new ProductoDaoImpl();

                int precioC = Integer.parseInt(preCSinPuntos);
                int precioV = Integer.parseInt(preVSinPuntos);
                if (!productoDao.verificarProducto(txtCodigo.getText().trim())) {
                    if (cbMedida.getSelectedItem().toString().equals("Cantidad")) {

                        int cantidad = Integer.parseInt(cantSinPuntos);

                        if (cantidad > 0) {
                            if (precioC > 0) {
                                if (precioV > 0) {
                                    if (precioV > precioC) {
                                        int aux = JOptionPane.showConfirmDialog(this, "¿Los datos ingresados estan correctos?", "Confirmar", JOptionPane.YES_OPTION);
                                        if (aux == JOptionPane.YES_OPTION) {

                                            producto = new Producto(0, txtCodigo.getText(), txtMarca.getText().toUpperCase(), txtNombre.getText().toUpperCase(), cantidad, 1.0, Integer.parseInt(preCSinPuntos), Integer.parseInt(preVSinPuntos), 1);
                                        } else {
                                            return;
                                        }

                                        int resp = productoDao.guardar1(producto);
                                        if (resp > 0) {
                                            JOptionPane.showMessageDialog(this, "Producto guardado correctamente");
                                            limpiar();

                                        } else {
                                            JOptionPane.showMessageDialog(this, "Error al guardar el producto", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
                                            limpiar();

                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, "No puede ingresar un precio de venta menor o igual al de compra, no tendra ganancias", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(this, "Ingrese el precio de venta correctamente", "Datos incorrectos", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Ingrese el precio de compra correctamente", "Datos incorrectos", JOptionPane.ERROR_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "Ingrese la cantidad correctamente", "Datos incorrectos", JOptionPane.ERROR_MESSAGE);
                        }
                        return;
                    }
                    if (cbMedida.getSelectedItem().toString().equals("Peso")) {

                        Double peso = Double.parseDouble(txtPeso.getText().trim());

                        if (peso > 0) {
                            if (precioC > 0) {
                                if (precioV > 0) {
                                    if (precioV > precioC) {
                                        int aux = JOptionPane.showConfirmDialog(this, "¿Los datos ingresados estan correctos?", "Confirmar", JOptionPane.YES_OPTION);

                                        if (aux == JOptionPane.YES_OPTION) {
                                            producto = new Producto(0, txtCodigo.getText(), txtMarca.getText(), txtNombre.getText(), 1, Double.parseDouble(txtPeso.getText()), Integer.parseInt(preCSinPuntos), Integer.parseInt(preVSinPuntos), 0);
                                        } else {
                                            return;
                                        }

                                        int resp = productoDao.guardar1(producto);
                                        if (resp > 0) {
                                            JOptionPane.showMessageDialog(this, "Producto guardado correctamente");
                                            limpiar();

                                        } else {
                                            JOptionPane.showMessageDialog(this, "Error al guardar el producto, contactese con el administrador del sistema", "Mensaje de Error", JOptionPane.ERROR_MESSAGE);
                                            limpiar();

                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(this, "No puede ingresar un precio de venta menor o igual al de compra, no tendra ganancias", "Datos Invalidos", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Ingrese el precio de venta correctamente, por favor", "Datos Invalidos", JOptionPane.ERROR_MESSAGE);
                                }

                            } else {
                                JOptionPane.showMessageDialog(this, "Ingrese el precio de compra correctamente, por favor", "Datos Invalidos", JOptionPane.ERROR_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "Ingrese el peso del producto correctamente, por favor", "Datos Invalidos", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Ingrese el peso del producto correctamente, por favor", "Datos Invalidos", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "El codigo ingresado ya existe en la base de datos", "Datos Invalidos", JOptionPane.ERROR_MESSAGE);

                }

            } else {
                JOptionPane.showMessageDialog(null, "Ingrese un codigo de menos de 21 numeros", "Error Codigo", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            Logger.getLogger(MantenedorAgregarProducto.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cbMedidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMedidaActionPerformed
        // Metodo para seleccionar solo una de las medidas, si es peso no puede rellenar cantidad, y viceversa.
        if (cbMedida.getSelectedItem().toString().equals("Seleccione Medida")) {
            txtCantidad.setEnabled(false);
            txtPeso.setEnabled(false);

        }
        if (cbMedida.getSelectedItem().toString().equals("Cantidad")) {
            txtCantidad.setEnabled(true);
            txtPeso.setText("");
            txtPeso.setEnabled(false);

        }
        if (cbMedida.getSelectedItem().toString().equals("Peso")) {
            txtPeso.setEnabled(true);
            txtCantidad.setText("");
            txtCantidad.setEnabled(false);

        }

    }//GEN-LAST:event_cbMedidaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        dispose();

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed


    }//GEN-LAST:event_txtCodigoActionPerformed

    private void txtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyTyped
        //Metodo de validacion para el codigo del producto, solo numeros.
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();//ignora el caracter digitado
        }
        int total = txtCodigo.getText().trim().length();
        //Cantidad maxima de numeros en un codigo de barra.
        if (total >= 13) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodigoKeyTyped

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        //Metodo de validacion para la cantidad del producto, solo numeros.
        char c;
        c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();//ignora el caracter digitado
        }

        int total = txtCantidad.getText().trim().length();
        if (total > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void txtPesoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesoKeyTyped
        //Metodo de validacion para el peso del producto, solo numeros.
        String punto = String.valueOf(evt.getKeyChar());
        char c;
        c = evt.getKeyChar();
        //Acept numeros y puntos.
        if ((c < '0' || c > '9') && c!='.') {
            evt.consume();//ignora el caracter digitado
        }
        
        int total = txtPeso.getText().trim().length();
        if (total > 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPesoKeyTyped

    private void txtPrecioCompraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraKeyTyped
        //Metodo de validacion para el precio comprado del producto, solo numeros.
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {

            evt.consume();
            JOptionPane.showMessageDialog(null, "No puede ingresar Letras!!!", "Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        int total = txtPrecioCompra.getText().trim().length();
        if (total > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioCompraKeyTyped

    private void txtPrecioVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaKeyTyped
        //Metodo de validacion para el precio venta del producto, solo numeros.
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {

            evt.consume();
            JOptionPane.showMessageDialog(null, "No puede ingresar Letras!!!", "Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        int total = txtPrecioVenta.getText().trim().length();
        if (total > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioVentaKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void txtCantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtCantidad.getText().trim();
        if (!texto.equals("")) {
            textoNuevo = texto.replace(".", "");

            String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));

            txtCantidad.setText(ff);
        }

    }//GEN-LAST:event_txtCantidadKeyReleased

    private void txtMarcaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMarcaKeyTyped
        // TODO add your handling code here:}
        int total = txtMarca.getText().trim().length();
        if (total > 19) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMarcaKeyTyped

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
        int total = txtNombre.getText().trim().length();
        if (total > 39) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtPrecioCompraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioCompraKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtPrecioCompra.getText().trim();
        if (!texto.equals("")) {

            textoNuevo = texto.replace(".", "");

            String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));

            txtPrecioCompra.setText(ff);
        }
    }//GEN-LAST:event_txtPrecioCompraKeyReleased

    private void txtPrecioVentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioVentaKeyReleased
        // TODO add your handling code here:
        DecimalFormat formateador = new DecimalFormat("###,###");
        String textoNuevo, texto = txtPrecioVenta.getText().trim();

        if (!texto.equals("")) {
            textoNuevo = texto.replace(".", "");

            String ff = String.valueOf(formateador.format(Integer.parseInt(textoNuevo)));

            txtPrecioVenta.setText(ff);
        }
    }//GEN-LAST:event_txtPrecioVentaKeyReleased

    private void txtPesoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesoKeyReleased

    public void cerrar() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(rootPane, "Desea cerrar la ventana", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) {
            dispose();
        } else {
        }
    }

    public void limpiar() {
        //Metodo limpiar el cual deja vacios los textbox.
        txtCantidad.setText("");
        txtCodigo.setText("");
        txtMarca.setText("");
        txtNombre.setText("");
        txtPeso.setText("");
        txtPrecioCompra.setText("");
        txtPrecioVenta.setText("");
        cbMedida.setSelectedIndex(0);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorAgregarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorAgregarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorAgregarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorAgregarProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MantenedorAgregarProducto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cbMedida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtPrecioCompra;
    private javax.swing.JTextField txtPrecioVenta;
    // End of variables declaration//GEN-END:variables
}
